// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mc500ipc.proto

#ifndef PROTOBUF_INCLUDED_mc500ipc_2eproto
#define PROTOBUF_INCLUDED_mc500ipc_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_mc500ipc_2eproto 

namespace protobuf_mc500ipc_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[16];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_mc500ipc_2eproto
namespace mc500ipc {
class AddProgramLine;
class AddProgramLineDefaultTypeInternal;
extern AddProgramLineDefaultTypeInternal _AddProgramLine_default_instance_;
class ClearProgram;
class ClearProgramDefaultTypeInternal;
extern ClearProgramDefaultTypeInternal _ClearProgram_default_instance_;
class CmdChangeTool;
class CmdChangeToolDefaultTypeInternal;
extern CmdChangeToolDefaultTypeInternal _CmdChangeTool_default_instance_;
class CmdMoveTo;
class CmdMoveToDefaultTypeInternal;
extern CmdMoveToDefaultTypeInternal _CmdMoveTo_default_instance_;
class CmdSpindle;
class CmdSpindleDefaultTypeInternal;
extern CmdSpindleDefaultTypeInternal _CmdSpindle_default_instance_;
class CommandResponse;
class CommandResponseDefaultTypeInternal;
extern CommandResponseDefaultTypeInternal _CommandResponse_default_instance_;
class Coordinate;
class CoordinateDefaultTypeInternal;
extern CoordinateDefaultTypeInternal _Coordinate_default_instance_;
class CycleExecuting;
class CycleExecutingDefaultTypeInternal;
extern CycleExecutingDefaultTypeInternal _CycleExecuting_default_instance_;
class CycleStart;
class CycleStartDefaultTypeInternal;
extern CycleStartDefaultTypeInternal _CycleStart_default_instance_;
class CycleStop;
class CycleStopDefaultTypeInternal;
extern CycleStopDefaultTypeInternal _CycleStop_default_instance_;
class CycleStopped;
class CycleStoppedDefaultTypeInternal;
extern CycleStoppedDefaultTypeInternal _CycleStopped_default_instance_;
class FeedHoldPressed;
class FeedHoldPressedDefaultTypeInternal;
extern FeedHoldPressedDefaultTypeInternal _FeedHoldPressed_default_instance_;
class FeedHoldReleased;
class FeedHoldReleasedDefaultTypeInternal;
extern FeedHoldReleasedDefaultTypeInternal _FeedHoldReleased_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class PositionUpdate;
class PositionUpdateDefaultTypeInternal;
extern PositionUpdateDefaultTypeInternal _PositionUpdate_default_instance_;
class SetWorkCoordinates;
class SetWorkCoordinatesDefaultTypeInternal;
extern SetWorkCoordinatesDefaultTypeInternal _SetWorkCoordinates_default_instance_;
}  // namespace mc500ipc
namespace google {
namespace protobuf {
template<> ::mc500ipc::AddProgramLine* Arena::CreateMaybeMessage<::mc500ipc::AddProgramLine>(Arena*);
template<> ::mc500ipc::ClearProgram* Arena::CreateMaybeMessage<::mc500ipc::ClearProgram>(Arena*);
template<> ::mc500ipc::CmdChangeTool* Arena::CreateMaybeMessage<::mc500ipc::CmdChangeTool>(Arena*);
template<> ::mc500ipc::CmdMoveTo* Arena::CreateMaybeMessage<::mc500ipc::CmdMoveTo>(Arena*);
template<> ::mc500ipc::CmdSpindle* Arena::CreateMaybeMessage<::mc500ipc::CmdSpindle>(Arena*);
template<> ::mc500ipc::CommandResponse* Arena::CreateMaybeMessage<::mc500ipc::CommandResponse>(Arena*);
template<> ::mc500ipc::Coordinate* Arena::CreateMaybeMessage<::mc500ipc::Coordinate>(Arena*);
template<> ::mc500ipc::CycleExecuting* Arena::CreateMaybeMessage<::mc500ipc::CycleExecuting>(Arena*);
template<> ::mc500ipc::CycleStart* Arena::CreateMaybeMessage<::mc500ipc::CycleStart>(Arena*);
template<> ::mc500ipc::CycleStop* Arena::CreateMaybeMessage<::mc500ipc::CycleStop>(Arena*);
template<> ::mc500ipc::CycleStopped* Arena::CreateMaybeMessage<::mc500ipc::CycleStopped>(Arena*);
template<> ::mc500ipc::FeedHoldPressed* Arena::CreateMaybeMessage<::mc500ipc::FeedHoldPressed>(Arena*);
template<> ::mc500ipc::FeedHoldReleased* Arena::CreateMaybeMessage<::mc500ipc::FeedHoldReleased>(Arena*);
template<> ::mc500ipc::Message* Arena::CreateMaybeMessage<::mc500ipc::Message>(Arena*);
template<> ::mc500ipc::PositionUpdate* Arena::CreateMaybeMessage<::mc500ipc::PositionUpdate>(Arena*);
template<> ::mc500ipc::SetWorkCoordinates* Arena::CreateMaybeMessage<::mc500ipc::SetWorkCoordinates>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace mc500ipc {

enum CmdSpindle_Command {
  CmdSpindle_Command_STOP = 0,
  CmdSpindle_Command_RUN_CW = 1,
  CmdSpindle_Command_RUN_CCW = 2
};
bool CmdSpindle_Command_IsValid(int value);
const CmdSpindle_Command CmdSpindle_Command_Command_MIN = CmdSpindle_Command_STOP;
const CmdSpindle_Command CmdSpindle_Command_Command_MAX = CmdSpindle_Command_RUN_CCW;
const int CmdSpindle_Command_Command_ARRAYSIZE = CmdSpindle_Command_Command_MAX + 1;

const ::google::protobuf::EnumDescriptor* CmdSpindle_Command_descriptor();
inline const ::std::string& CmdSpindle_Command_Name(CmdSpindle_Command value) {
  return ::google::protobuf::internal::NameOfEnum(
    CmdSpindle_Command_descriptor(), value);
}
inline bool CmdSpindle_Command_Parse(
    const ::std::string& name, CmdSpindle_Command* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CmdSpindle_Command>(
    CmdSpindle_Command_descriptor(), name, value);
}
// ===================================================================

class Coordinate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mc500ipc.Coordinate) */ {
 public:
  Coordinate();
  virtual ~Coordinate();

  Coordinate(const Coordinate& from);

  inline Coordinate& operator=(const Coordinate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Coordinate(Coordinate&& from) noexcept
    : Coordinate() {
    *this = ::std::move(from);
  }

  inline Coordinate& operator=(Coordinate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Coordinate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Coordinate* internal_default_instance() {
    return reinterpret_cast<const Coordinate*>(
               &_Coordinate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Coordinate* other);
  friend void swap(Coordinate& a, Coordinate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Coordinate* New() const final {
    return CreateMaybeMessage<Coordinate>(NULL);
  }

  Coordinate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Coordinate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Coordinate& from);
  void MergeFrom(const Coordinate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coordinate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // optional int32 y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // optional int32 z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  ::google::protobuf::int32 z() const;
  void set_z(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mc500ipc.Coordinate)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_z();
  void clear_has_z();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 z_;
  friend struct ::protobuf_mc500ipc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdSpindle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mc500ipc.CmdSpindle) */ {
 public:
  CmdSpindle();
  virtual ~CmdSpindle();

  CmdSpindle(const CmdSpindle& from);

  inline CmdSpindle& operator=(const CmdSpindle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdSpindle(CmdSpindle&& from) noexcept
    : CmdSpindle() {
    *this = ::std::move(from);
  }

  inline CmdSpindle& operator=(CmdSpindle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdSpindle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdSpindle* internal_default_instance() {
    return reinterpret_cast<const CmdSpindle*>(
               &_CmdSpindle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CmdSpindle* other);
  friend void swap(CmdSpindle& a, CmdSpindle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdSpindle* New() const final {
    return CreateMaybeMessage<CmdSpindle>(NULL);
  }

  CmdSpindle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdSpindle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdSpindle& from);
  void MergeFrom(const CmdSpindle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdSpindle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CmdSpindle_Command Command;
  static const Command STOP =
    CmdSpindle_Command_STOP;
  static const Command RUN_CW =
    CmdSpindle_Command_RUN_CW;
  static const Command RUN_CCW =
    CmdSpindle_Command_RUN_CCW;
  static inline bool Command_IsValid(int value) {
    return CmdSpindle_Command_IsValid(value);
  }
  static const Command Command_MIN =
    CmdSpindle_Command_Command_MIN;
  static const Command Command_MAX =
    CmdSpindle_Command_Command_MAX;
  static const int Command_ARRAYSIZE =
    CmdSpindle_Command_Command_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Command_descriptor() {
    return CmdSpindle_Command_descriptor();
  }
  static inline const ::std::string& Command_Name(Command value) {
    return CmdSpindle_Command_Name(value);
  }
  static inline bool Command_Parse(const ::std::string& name,
      Command* value) {
    return CmdSpindle_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string id = 3;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 3;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // required .mc500ipc.CmdSpindle.Command cmd = 1;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  ::mc500ipc::CmdSpindle_Command cmd() const;
  void set_cmd(::mc500ipc::CmdSpindle_Command value);

  // required uint32 rpm = 2;
  bool has_rpm() const;
  void clear_rpm();
  static const int kRpmFieldNumber = 2;
  ::google::protobuf::uint32 rpm() const;
  void set_rpm(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mc500ipc.CmdSpindle)
 private:
  void set_has_cmd();
  void clear_has_cmd();
  void set_has_rpm();
  void clear_has_rpm();
  void set_has_id();
  void clear_has_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  int cmd_;
  ::google::protobuf::uint32 rpm_;
  friend struct ::protobuf_mc500ipc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMoveTo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mc500ipc.CmdMoveTo) */ {
 public:
  CmdMoveTo();
  virtual ~CmdMoveTo();

  CmdMoveTo(const CmdMoveTo& from);

  inline CmdMoveTo& operator=(const CmdMoveTo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMoveTo(CmdMoveTo&& from) noexcept
    : CmdMoveTo() {
    *this = ::std::move(from);
  }

  inline CmdMoveTo& operator=(CmdMoveTo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMoveTo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMoveTo* internal_default_instance() {
    return reinterpret_cast<const CmdMoveTo*>(
               &_CmdMoveTo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CmdMoveTo* other);
  friend void swap(CmdMoveTo& a, CmdMoveTo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMoveTo* New() const final {
    return CreateMaybeMessage<CmdMoveTo>(NULL);
  }

  CmdMoveTo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMoveTo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMoveTo& from);
  void MergeFrom(const CmdMoveTo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMoveTo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 3;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 3;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // required .mc500ipc.Coordinate workTarget = 1;
  bool has_worktarget() const;
  void clear_worktarget();
  static const int kWorkTargetFieldNumber = 1;
  private:
  const ::mc500ipc::Coordinate& _internal_worktarget() const;
  public:
  const ::mc500ipc::Coordinate& worktarget() const;
  ::mc500ipc::Coordinate* release_worktarget();
  ::mc500ipc::Coordinate* mutable_worktarget();
  void set_allocated_worktarget(::mc500ipc::Coordinate* worktarget);

  // required uint32 speed = 2;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 2;
  ::google::protobuf::uint32 speed() const;
  void set_speed(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mc500ipc.CmdMoveTo)
 private:
  void set_has_worktarget();
  void clear_has_worktarget();
  void set_has_speed();
  void clear_has_speed();
  void set_has_id();
  void clear_has_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::mc500ipc::Coordinate* worktarget_;
  ::google::protobuf::uint32 speed_;
  friend struct ::protobuf_mc500ipc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdChangeTool : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mc500ipc.CmdChangeTool) */ {
 public:
  CmdChangeTool();
  virtual ~CmdChangeTool();

  CmdChangeTool(const CmdChangeTool& from);

  inline CmdChangeTool& operator=(const CmdChangeTool& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdChangeTool(CmdChangeTool&& from) noexcept
    : CmdChangeTool() {
    *this = ::std::move(from);
  }

  inline CmdChangeTool& operator=(CmdChangeTool&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdChangeTool& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdChangeTool* internal_default_instance() {
    return reinterpret_cast<const CmdChangeTool*>(
               &_CmdChangeTool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CmdChangeTool* other);
  friend void swap(CmdChangeTool& a, CmdChangeTool& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdChangeTool* New() const final {
    return CreateMaybeMessage<CmdChangeTool>(NULL);
  }

  CmdChangeTool* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdChangeTool>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdChangeTool& from);
  void MergeFrom(const CmdChangeTool& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdChangeTool* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // required uint32 newTool = 1;
  bool has_newtool() const;
  void clear_newtool();
  static const int kNewToolFieldNumber = 1;
  ::google::protobuf::uint32 newtool() const;
  void set_newtool(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mc500ipc.CmdChangeTool)
 private:
  void set_has_newtool();
  void clear_has_newtool();
  void set_has_id();
  void clear_has_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::uint32 newtool_;
  friend struct ::protobuf_mc500ipc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommandResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mc500ipc.CommandResponse) */ {
 public:
  CommandResponse();
  virtual ~CommandResponse();

  CommandResponse(const CommandResponse& from);

  inline CommandResponse& operator=(const CommandResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommandResponse(CommandResponse&& from) noexcept
    : CommandResponse() {
    *this = ::std::move(from);
  }

  inline CommandResponse& operator=(CommandResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandResponse* internal_default_instance() {
    return reinterpret_cast<const CommandResponse*>(
               &_CommandResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CommandResponse* other);
  friend void swap(CommandResponse& a, CommandResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommandResponse* New() const final {
    return CreateMaybeMessage<CommandResponse>(NULL);
  }

  CommandResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommandResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommandResponse& from);
  void MergeFrom(const CommandResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string diagMsg = 3;
  bool has_diagmsg() const;
  void clear_diagmsg();
  static const int kDiagMsgFieldNumber = 3;
  const ::std::string& diagmsg() const;
  void set_diagmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_diagmsg(::std::string&& value);
  #endif
  void set_diagmsg(const char* value);
  void set_diagmsg(const char* value, size_t size);
  ::std::string* mutable_diagmsg();
  ::std::string* release_diagmsg();
  void set_allocated_diagmsg(::std::string* diagmsg);

  // required bool finished = 2;
  bool has_finished() const;
  void clear_finished();
  static const int kFinishedFieldNumber = 2;
  bool finished() const;
  void set_finished(bool value);

  // @@protoc_insertion_point(class_scope:mc500ipc.CommandResponse)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_finished();
  void clear_has_finished();
  void set_has_diagmsg();
  void clear_has_diagmsg();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr diagmsg_;
  bool finished_;
  friend struct ::protobuf_mc500ipc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FeedHoldPressed : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mc500ipc.FeedHoldPressed) */ {
 public:
  FeedHoldPressed();
  virtual ~FeedHoldPressed();

  FeedHoldPressed(const FeedHoldPressed& from);

  inline FeedHoldPressed& operator=(const FeedHoldPressed& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FeedHoldPressed(FeedHoldPressed&& from) noexcept
    : FeedHoldPressed() {
    *this = ::std::move(from);
  }

  inline FeedHoldPressed& operator=(FeedHoldPressed&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeedHoldPressed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FeedHoldPressed* internal_default_instance() {
    return reinterpret_cast<const FeedHoldPressed*>(
               &_FeedHoldPressed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(FeedHoldPressed* other);
  friend void swap(FeedHoldPressed& a, FeedHoldPressed& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FeedHoldPressed* New() const final {
    return CreateMaybeMessage<FeedHoldPressed>(NULL);
  }

  FeedHoldPressed* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FeedHoldPressed>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FeedHoldPressed& from);
  void MergeFrom(const FeedHoldPressed& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeedHoldPressed* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mc500ipc.FeedHoldPressed)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mc500ipc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FeedHoldReleased : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mc500ipc.FeedHoldReleased) */ {
 public:
  FeedHoldReleased();
  virtual ~FeedHoldReleased();

  FeedHoldReleased(const FeedHoldReleased& from);

  inline FeedHoldReleased& operator=(const FeedHoldReleased& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FeedHoldReleased(FeedHoldReleased&& from) noexcept
    : FeedHoldReleased() {
    *this = ::std::move(from);
  }

  inline FeedHoldReleased& operator=(FeedHoldReleased&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeedHoldReleased& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FeedHoldReleased* internal_default_instance() {
    return reinterpret_cast<const FeedHoldReleased*>(
               &_FeedHoldReleased_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(FeedHoldReleased* other);
  friend void swap(FeedHoldReleased& a, FeedHoldReleased& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FeedHoldReleased* New() const final {
    return CreateMaybeMessage<FeedHoldReleased>(NULL);
  }

  FeedHoldReleased* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FeedHoldReleased>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FeedHoldReleased& from);
  void MergeFrom(const FeedHoldReleased& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeedHoldReleased* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mc500ipc.FeedHoldReleased)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mc500ipc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CycleStart : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mc500ipc.CycleStart) */ {
 public:
  CycleStart();
  virtual ~CycleStart();

  CycleStart(const CycleStart& from);

  inline CycleStart& operator=(const CycleStart& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CycleStart(CycleStart&& from) noexcept
    : CycleStart() {
    *this = ::std::move(from);
  }

  inline CycleStart& operator=(CycleStart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CycleStart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CycleStart* internal_default_instance() {
    return reinterpret_cast<const CycleStart*>(
               &_CycleStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CycleStart* other);
  friend void swap(CycleStart& a, CycleStart& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CycleStart* New() const final {
    return CreateMaybeMessage<CycleStart>(NULL);
  }

  CycleStart* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CycleStart>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CycleStart& from);
  void MergeFrom(const CycleStart& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CycleStart* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mc500ipc.CycleStart)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mc500ipc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CycleStop : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mc500ipc.CycleStop) */ {
 public:
  CycleStop();
  virtual ~CycleStop();

  CycleStop(const CycleStop& from);

  inline CycleStop& operator=(const CycleStop& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CycleStop(CycleStop&& from) noexcept
    : CycleStop() {
    *this = ::std::move(from);
  }

  inline CycleStop& operator=(CycleStop&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CycleStop& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CycleStop* internal_default_instance() {
    return reinterpret_cast<const CycleStop*>(
               &_CycleStop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(CycleStop* other);
  friend void swap(CycleStop& a, CycleStop& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CycleStop* New() const final {
    return CreateMaybeMessage<CycleStop>(NULL);
  }

  CycleStop* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CycleStop>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CycleStop& from);
  void MergeFrom(const CycleStop& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CycleStop* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mc500ipc.CycleStop)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mc500ipc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CycleExecuting : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mc500ipc.CycleExecuting) */ {
 public:
  CycleExecuting();
  virtual ~CycleExecuting();

  CycleExecuting(const CycleExecuting& from);

  inline CycleExecuting& operator=(const CycleExecuting& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CycleExecuting(CycleExecuting&& from) noexcept
    : CycleExecuting() {
    *this = ::std::move(from);
  }

  inline CycleExecuting& operator=(CycleExecuting&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CycleExecuting& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CycleExecuting* internal_default_instance() {
    return reinterpret_cast<const CycleExecuting*>(
               &_CycleExecuting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(CycleExecuting* other);
  friend void swap(CycleExecuting& a, CycleExecuting& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CycleExecuting* New() const final {
    return CreateMaybeMessage<CycleExecuting>(NULL);
  }

  CycleExecuting* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CycleExecuting>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CycleExecuting& from);
  void MergeFrom(const CycleExecuting& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CycleExecuting* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 currentProgramStep = 1;
  bool has_currentprogramstep() const;
  void clear_currentprogramstep();
  static const int kCurrentProgramStepFieldNumber = 1;
  ::google::protobuf::uint32 currentprogramstep() const;
  void set_currentprogramstep(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mc500ipc.CycleExecuting)
 private:
  void set_has_currentprogramstep();
  void clear_has_currentprogramstep();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 currentprogramstep_;
  friend struct ::protobuf_mc500ipc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CycleStopped : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mc500ipc.CycleStopped) */ {
 public:
  CycleStopped();
  virtual ~CycleStopped();

  CycleStopped(const CycleStopped& from);

  inline CycleStopped& operator=(const CycleStopped& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CycleStopped(CycleStopped&& from) noexcept
    : CycleStopped() {
    *this = ::std::move(from);
  }

  inline CycleStopped& operator=(CycleStopped&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CycleStopped& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CycleStopped* internal_default_instance() {
    return reinterpret_cast<const CycleStopped*>(
               &_CycleStopped_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(CycleStopped* other);
  friend void swap(CycleStopped& a, CycleStopped& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CycleStopped* New() const final {
    return CreateMaybeMessage<CycleStopped>(NULL);
  }

  CycleStopped* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CycleStopped>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CycleStopped& from);
  void MergeFrom(const CycleStopped& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CycleStopped* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 nextProgramStep = 1;
  bool has_nextprogramstep() const;
  void clear_nextprogramstep();
  static const int kNextProgramStepFieldNumber = 1;
  ::google::protobuf::uint32 nextprogramstep() const;
  void set_nextprogramstep(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mc500ipc.CycleStopped)
 private:
  void set_has_nextprogramstep();
  void clear_has_nextprogramstep();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 nextprogramstep_;
  friend struct ::protobuf_mc500ipc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClearProgram : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mc500ipc.ClearProgram) */ {
 public:
  ClearProgram();
  virtual ~ClearProgram();

  ClearProgram(const ClearProgram& from);

  inline ClearProgram& operator=(const ClearProgram& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClearProgram(ClearProgram&& from) noexcept
    : ClearProgram() {
    *this = ::std::move(from);
  }

  inline ClearProgram& operator=(ClearProgram&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClearProgram& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearProgram* internal_default_instance() {
    return reinterpret_cast<const ClearProgram*>(
               &_ClearProgram_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(ClearProgram* other);
  friend void swap(ClearProgram& a, ClearProgram& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClearProgram* New() const final {
    return CreateMaybeMessage<ClearProgram>(NULL);
  }

  ClearProgram* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClearProgram>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClearProgram& from);
  void MergeFrom(const ClearProgram& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearProgram* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mc500ipc.ClearProgram)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mc500ipc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddProgramLine : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mc500ipc.AddProgramLine) */ {
 public:
  AddProgramLine();
  virtual ~AddProgramLine();

  AddProgramLine(const AddProgramLine& from);

  inline AddProgramLine& operator=(const AddProgramLine& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddProgramLine(AddProgramLine&& from) noexcept
    : AddProgramLine() {
    *this = ::std::move(from);
  }

  inline AddProgramLine& operator=(AddProgramLine&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddProgramLine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddProgramLine* internal_default_instance() {
    return reinterpret_cast<const AddProgramLine*>(
               &_AddProgramLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(AddProgramLine* other);
  friend void swap(AddProgramLine& a, AddProgramLine& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddProgramLine* New() const final {
    return CreateMaybeMessage<AddProgramLine>(NULL);
  }

  AddProgramLine* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddProgramLine>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddProgramLine& from);
  void MergeFrom(const AddProgramLine& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddProgramLine* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // required uint32 step = 2;
  bool has_step() const;
  void clear_step();
  static const int kStepFieldNumber = 2;
  ::google::protobuf::uint32 step() const;
  void set_step(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mc500ipc.AddProgramLine)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_step();
  void clear_has_step();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::uint32 step_;
  friend struct ::protobuf_mc500ipc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetWorkCoordinates : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mc500ipc.SetWorkCoordinates) */ {
 public:
  SetWorkCoordinates();
  virtual ~SetWorkCoordinates();

  SetWorkCoordinates(const SetWorkCoordinates& from);

  inline SetWorkCoordinates& operator=(const SetWorkCoordinates& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetWorkCoordinates(SetWorkCoordinates&& from) noexcept
    : SetWorkCoordinates() {
    *this = ::std::move(from);
  }

  inline SetWorkCoordinates& operator=(SetWorkCoordinates&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetWorkCoordinates& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetWorkCoordinates* internal_default_instance() {
    return reinterpret_cast<const SetWorkCoordinates*>(
               &_SetWorkCoordinates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(SetWorkCoordinates* other);
  friend void swap(SetWorkCoordinates& a, SetWorkCoordinates& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetWorkCoordinates* New() const final {
    return CreateMaybeMessage<SetWorkCoordinates>(NULL);
  }

  SetWorkCoordinates* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetWorkCoordinates>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetWorkCoordinates& from);
  void MergeFrom(const SetWorkCoordinates& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetWorkCoordinates* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mc500ipc.Coordinate currentWorkCoordinate = 1;
  bool has_currentworkcoordinate() const;
  void clear_currentworkcoordinate();
  static const int kCurrentWorkCoordinateFieldNumber = 1;
  private:
  const ::mc500ipc::Coordinate& _internal_currentworkcoordinate() const;
  public:
  const ::mc500ipc::Coordinate& currentworkcoordinate() const;
  ::mc500ipc::Coordinate* release_currentworkcoordinate();
  ::mc500ipc::Coordinate* mutable_currentworkcoordinate();
  void set_allocated_currentworkcoordinate(::mc500ipc::Coordinate* currentworkcoordinate);

  // @@protoc_insertion_point(class_scope:mc500ipc.SetWorkCoordinates)
 private:
  void set_has_currentworkcoordinate();
  void clear_has_currentworkcoordinate();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::mc500ipc::Coordinate* currentworkcoordinate_;
  friend struct ::protobuf_mc500ipc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PositionUpdate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mc500ipc.PositionUpdate) */ {
 public:
  PositionUpdate();
  virtual ~PositionUpdate();

  PositionUpdate(const PositionUpdate& from);

  inline PositionUpdate& operator=(const PositionUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PositionUpdate(PositionUpdate&& from) noexcept
    : PositionUpdate() {
    *this = ::std::move(from);
  }

  inline PositionUpdate& operator=(PositionUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PositionUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PositionUpdate* internal_default_instance() {
    return reinterpret_cast<const PositionUpdate*>(
               &_PositionUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(PositionUpdate* other);
  friend void swap(PositionUpdate& a, PositionUpdate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PositionUpdate* New() const final {
    return CreateMaybeMessage<PositionUpdate>(NULL);
  }

  PositionUpdate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PositionUpdate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PositionUpdate& from);
  void MergeFrom(const PositionUpdate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mc500ipc.Coordinate currentWorkCoordinate = 1;
  bool has_currentworkcoordinate() const;
  void clear_currentworkcoordinate();
  static const int kCurrentWorkCoordinateFieldNumber = 1;
  private:
  const ::mc500ipc::Coordinate& _internal_currentworkcoordinate() const;
  public:
  const ::mc500ipc::Coordinate& currentworkcoordinate() const;
  ::mc500ipc::Coordinate* release_currentworkcoordinate();
  ::mc500ipc::Coordinate* mutable_currentworkcoordinate();
  void set_allocated_currentworkcoordinate(::mc500ipc::Coordinate* currentworkcoordinate);

  // @@protoc_insertion_point(class_scope:mc500ipc.PositionUpdate)
 private:
  void set_has_currentworkcoordinate();
  void clear_has_currentworkcoordinate();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::mc500ipc::Coordinate* currentworkcoordinate_;
  friend struct ::protobuf_mc500ipc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mc500ipc.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  enum MsgCase {
    kSpindleCommand = 1,
    kMoveToCommand = 2,
    kCommandresponse = 3,
    kToolcommand = 4,
    kFeedHoldPressed = 5,
    kFeedHoldReleased = 6,
    kCycleStart = 7,
    kCycleStop = 8,
    kCycleExecuting = 9,
    kCycleStopped = 10,
    kClearProgram = 11,
    kAddProgramLine = 12,
    kSetWorkCoordinates = 13,
    kPositionUpdate = 14,
    MSG_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(Message* other);
  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(NULL);
  }

  Message* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mc500ipc.CmdSpindle spindleCommand = 1;
  bool has_spindlecommand() const;
  void clear_spindlecommand();
  static const int kSpindleCommandFieldNumber = 1;
  private:
  const ::mc500ipc::CmdSpindle& _internal_spindlecommand() const;
  public:
  const ::mc500ipc::CmdSpindle& spindlecommand() const;
  ::mc500ipc::CmdSpindle* release_spindlecommand();
  ::mc500ipc::CmdSpindle* mutable_spindlecommand();
  void set_allocated_spindlecommand(::mc500ipc::CmdSpindle* spindlecommand);

  // optional .mc500ipc.CmdMoveTo moveToCommand = 2;
  bool has_movetocommand() const;
  void clear_movetocommand();
  static const int kMoveToCommandFieldNumber = 2;
  private:
  const ::mc500ipc::CmdMoveTo& _internal_movetocommand() const;
  public:
  const ::mc500ipc::CmdMoveTo& movetocommand() const;
  ::mc500ipc::CmdMoveTo* release_movetocommand();
  ::mc500ipc::CmdMoveTo* mutable_movetocommand();
  void set_allocated_movetocommand(::mc500ipc::CmdMoveTo* movetocommand);

  // optional .mc500ipc.CommandResponse commandresponse = 3;
  bool has_commandresponse() const;
  void clear_commandresponse();
  static const int kCommandresponseFieldNumber = 3;
  private:
  const ::mc500ipc::CommandResponse& _internal_commandresponse() const;
  public:
  const ::mc500ipc::CommandResponse& commandresponse() const;
  ::mc500ipc::CommandResponse* release_commandresponse();
  ::mc500ipc::CommandResponse* mutable_commandresponse();
  void set_allocated_commandresponse(::mc500ipc::CommandResponse* commandresponse);

  // optional .mc500ipc.CmdChangeTool toolcommand = 4;
  bool has_toolcommand() const;
  void clear_toolcommand();
  static const int kToolcommandFieldNumber = 4;
  private:
  const ::mc500ipc::CmdChangeTool& _internal_toolcommand() const;
  public:
  const ::mc500ipc::CmdChangeTool& toolcommand() const;
  ::mc500ipc::CmdChangeTool* release_toolcommand();
  ::mc500ipc::CmdChangeTool* mutable_toolcommand();
  void set_allocated_toolcommand(::mc500ipc::CmdChangeTool* toolcommand);

  // optional .mc500ipc.FeedHoldPressed feedHoldPressed = 5;
  bool has_feedholdpressed() const;
  void clear_feedholdpressed();
  static const int kFeedHoldPressedFieldNumber = 5;
  private:
  const ::mc500ipc::FeedHoldPressed& _internal_feedholdpressed() const;
  public:
  const ::mc500ipc::FeedHoldPressed& feedholdpressed() const;
  ::mc500ipc::FeedHoldPressed* release_feedholdpressed();
  ::mc500ipc::FeedHoldPressed* mutable_feedholdpressed();
  void set_allocated_feedholdpressed(::mc500ipc::FeedHoldPressed* feedholdpressed);

  // optional .mc500ipc.FeedHoldReleased feedHoldReleased = 6;
  bool has_feedholdreleased() const;
  void clear_feedholdreleased();
  static const int kFeedHoldReleasedFieldNumber = 6;
  private:
  const ::mc500ipc::FeedHoldReleased& _internal_feedholdreleased() const;
  public:
  const ::mc500ipc::FeedHoldReleased& feedholdreleased() const;
  ::mc500ipc::FeedHoldReleased* release_feedholdreleased();
  ::mc500ipc::FeedHoldReleased* mutable_feedholdreleased();
  void set_allocated_feedholdreleased(::mc500ipc::FeedHoldReleased* feedholdreleased);

  // optional .mc500ipc.CycleStart cycleStart = 7;
  bool has_cyclestart() const;
  void clear_cyclestart();
  static const int kCycleStartFieldNumber = 7;
  private:
  const ::mc500ipc::CycleStart& _internal_cyclestart() const;
  public:
  const ::mc500ipc::CycleStart& cyclestart() const;
  ::mc500ipc::CycleStart* release_cyclestart();
  ::mc500ipc::CycleStart* mutable_cyclestart();
  void set_allocated_cyclestart(::mc500ipc::CycleStart* cyclestart);

  // optional .mc500ipc.CycleStop cycleStop = 8;
  bool has_cyclestop() const;
  void clear_cyclestop();
  static const int kCycleStopFieldNumber = 8;
  private:
  const ::mc500ipc::CycleStop& _internal_cyclestop() const;
  public:
  const ::mc500ipc::CycleStop& cyclestop() const;
  ::mc500ipc::CycleStop* release_cyclestop();
  ::mc500ipc::CycleStop* mutable_cyclestop();
  void set_allocated_cyclestop(::mc500ipc::CycleStop* cyclestop);

  // optional .mc500ipc.CycleExecuting cycleExecuting = 9;
  bool has_cycleexecuting() const;
  void clear_cycleexecuting();
  static const int kCycleExecutingFieldNumber = 9;
  private:
  const ::mc500ipc::CycleExecuting& _internal_cycleexecuting() const;
  public:
  const ::mc500ipc::CycleExecuting& cycleexecuting() const;
  ::mc500ipc::CycleExecuting* release_cycleexecuting();
  ::mc500ipc::CycleExecuting* mutable_cycleexecuting();
  void set_allocated_cycleexecuting(::mc500ipc::CycleExecuting* cycleexecuting);

  // optional .mc500ipc.CycleStopped cycleStopped = 10;
  bool has_cyclestopped() const;
  void clear_cyclestopped();
  static const int kCycleStoppedFieldNumber = 10;
  private:
  const ::mc500ipc::CycleStopped& _internal_cyclestopped() const;
  public:
  const ::mc500ipc::CycleStopped& cyclestopped() const;
  ::mc500ipc::CycleStopped* release_cyclestopped();
  ::mc500ipc::CycleStopped* mutable_cyclestopped();
  void set_allocated_cyclestopped(::mc500ipc::CycleStopped* cyclestopped);

  // optional .mc500ipc.ClearProgram clearProgram = 11;
  bool has_clearprogram() const;
  void clear_clearprogram();
  static const int kClearProgramFieldNumber = 11;
  private:
  const ::mc500ipc::ClearProgram& _internal_clearprogram() const;
  public:
  const ::mc500ipc::ClearProgram& clearprogram() const;
  ::mc500ipc::ClearProgram* release_clearprogram();
  ::mc500ipc::ClearProgram* mutable_clearprogram();
  void set_allocated_clearprogram(::mc500ipc::ClearProgram* clearprogram);

  // optional .mc500ipc.AddProgramLine addProgramLine = 12;
  bool has_addprogramline() const;
  void clear_addprogramline();
  static const int kAddProgramLineFieldNumber = 12;
  private:
  const ::mc500ipc::AddProgramLine& _internal_addprogramline() const;
  public:
  const ::mc500ipc::AddProgramLine& addprogramline() const;
  ::mc500ipc::AddProgramLine* release_addprogramline();
  ::mc500ipc::AddProgramLine* mutable_addprogramline();
  void set_allocated_addprogramline(::mc500ipc::AddProgramLine* addprogramline);

  // optional .mc500ipc.SetWorkCoordinates setWorkCoordinates = 13;
  bool has_setworkcoordinates() const;
  void clear_setworkcoordinates();
  static const int kSetWorkCoordinatesFieldNumber = 13;
  private:
  const ::mc500ipc::SetWorkCoordinates& _internal_setworkcoordinates() const;
  public:
  const ::mc500ipc::SetWorkCoordinates& setworkcoordinates() const;
  ::mc500ipc::SetWorkCoordinates* release_setworkcoordinates();
  ::mc500ipc::SetWorkCoordinates* mutable_setworkcoordinates();
  void set_allocated_setworkcoordinates(::mc500ipc::SetWorkCoordinates* setworkcoordinates);

  // optional .mc500ipc.PositionUpdate positionUpdate = 14;
  bool has_positionupdate() const;
  void clear_positionupdate();
  static const int kPositionUpdateFieldNumber = 14;
  private:
  const ::mc500ipc::PositionUpdate& _internal_positionupdate() const;
  public:
  const ::mc500ipc::PositionUpdate& positionupdate() const;
  ::mc500ipc::PositionUpdate* release_positionupdate();
  ::mc500ipc::PositionUpdate* mutable_positionupdate();
  void set_allocated_positionupdate(::mc500ipc::PositionUpdate* positionupdate);

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:mc500ipc.Message)
 private:
  void set_has_spindlecommand();
  void set_has_movetocommand();
  void set_has_commandresponse();
  void set_has_toolcommand();
  void set_has_feedholdpressed();
  void set_has_feedholdreleased();
  void set_has_cyclestart();
  void set_has_cyclestop();
  void set_has_cycleexecuting();
  void set_has_cyclestopped();
  void set_has_clearprogram();
  void set_has_addprogramline();
  void set_has_setworkcoordinates();
  void set_has_positionupdate();

  inline bool has_msg() const;
  inline void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  union MsgUnion {
    MsgUnion() {}
    ::mc500ipc::CmdSpindle* spindlecommand_;
    ::mc500ipc::CmdMoveTo* movetocommand_;
    ::mc500ipc::CommandResponse* commandresponse_;
    ::mc500ipc::CmdChangeTool* toolcommand_;
    ::mc500ipc::FeedHoldPressed* feedholdpressed_;
    ::mc500ipc::FeedHoldReleased* feedholdreleased_;
    ::mc500ipc::CycleStart* cyclestart_;
    ::mc500ipc::CycleStop* cyclestop_;
    ::mc500ipc::CycleExecuting* cycleexecuting_;
    ::mc500ipc::CycleStopped* cyclestopped_;
    ::mc500ipc::ClearProgram* clearprogram_;
    ::mc500ipc::AddProgramLine* addprogramline_;
    ::mc500ipc::SetWorkCoordinates* setworkcoordinates_;
    ::mc500ipc::PositionUpdate* positionupdate_;
  } msg_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_mc500ipc_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Coordinate

// optional int32 x = 1;
inline bool Coordinate::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Coordinate::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Coordinate::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Coordinate::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 Coordinate::x() const {
  // @@protoc_insertion_point(field_get:mc500ipc.Coordinate.x)
  return x_;
}
inline void Coordinate::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:mc500ipc.Coordinate.x)
}

// optional int32 y = 2;
inline bool Coordinate::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Coordinate::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Coordinate::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Coordinate::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 Coordinate::y() const {
  // @@protoc_insertion_point(field_get:mc500ipc.Coordinate.y)
  return y_;
}
inline void Coordinate::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:mc500ipc.Coordinate.y)
}

// optional int32 z = 3;
inline bool Coordinate::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Coordinate::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Coordinate::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Coordinate::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline ::google::protobuf::int32 Coordinate::z() const {
  // @@protoc_insertion_point(field_get:mc500ipc.Coordinate.z)
  return z_;
}
inline void Coordinate::set_z(::google::protobuf::int32 value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:mc500ipc.Coordinate.z)
}

// -------------------------------------------------------------------

// CmdSpindle

// required .mc500ipc.CmdSpindle.Command cmd = 1;
inline bool CmdSpindle::has_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdSpindle::set_has_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdSpindle::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdSpindle::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::mc500ipc::CmdSpindle_Command CmdSpindle::cmd() const {
  // @@protoc_insertion_point(field_get:mc500ipc.CmdSpindle.cmd)
  return static_cast< ::mc500ipc::CmdSpindle_Command >(cmd_);
}
inline void CmdSpindle::set_cmd(::mc500ipc::CmdSpindle_Command value) {
  assert(::mc500ipc::CmdSpindle_Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:mc500ipc.CmdSpindle.cmd)
}

// required uint32 rpm = 2;
inline bool CmdSpindle::has_rpm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdSpindle::set_has_rpm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdSpindle::clear_has_rpm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdSpindle::clear_rpm() {
  rpm_ = 0u;
  clear_has_rpm();
}
inline ::google::protobuf::uint32 CmdSpindle::rpm() const {
  // @@protoc_insertion_point(field_get:mc500ipc.CmdSpindle.rpm)
  return rpm_;
}
inline void CmdSpindle::set_rpm(::google::protobuf::uint32 value) {
  set_has_rpm();
  rpm_ = value;
  // @@protoc_insertion_point(field_set:mc500ipc.CmdSpindle.rpm)
}

// required string id = 3;
inline bool CmdSpindle::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdSpindle::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdSpindle::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdSpindle::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& CmdSpindle::id() const {
  // @@protoc_insertion_point(field_get:mc500ipc.CmdSpindle.id)
  return id_.GetNoArena();
}
inline void CmdSpindle::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mc500ipc.CmdSpindle.id)
}
#if LANG_CXX11
inline void CmdSpindle::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mc500ipc.CmdSpindle.id)
}
#endif
inline void CmdSpindle::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mc500ipc.CmdSpindle.id)
}
inline void CmdSpindle::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mc500ipc.CmdSpindle.id)
}
inline ::std::string* CmdSpindle::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:mc500ipc.CmdSpindle.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdSpindle::release_id() {
  // @@protoc_insertion_point(field_release:mc500ipc.CmdSpindle.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdSpindle::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:mc500ipc.CmdSpindle.id)
}

// -------------------------------------------------------------------

// CmdMoveTo

// required .mc500ipc.Coordinate workTarget = 1;
inline bool CmdMoveTo::has_worktarget() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMoveTo::set_has_worktarget() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMoveTo::clear_has_worktarget() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMoveTo::clear_worktarget() {
  if (worktarget_ != NULL) worktarget_->Clear();
  clear_has_worktarget();
}
inline const ::mc500ipc::Coordinate& CmdMoveTo::_internal_worktarget() const {
  return *worktarget_;
}
inline const ::mc500ipc::Coordinate& CmdMoveTo::worktarget() const {
  const ::mc500ipc::Coordinate* p = worktarget_;
  // @@protoc_insertion_point(field_get:mc500ipc.CmdMoveTo.workTarget)
  return p != NULL ? *p : *reinterpret_cast<const ::mc500ipc::Coordinate*>(
      &::mc500ipc::_Coordinate_default_instance_);
}
inline ::mc500ipc::Coordinate* CmdMoveTo::release_worktarget() {
  // @@protoc_insertion_point(field_release:mc500ipc.CmdMoveTo.workTarget)
  clear_has_worktarget();
  ::mc500ipc::Coordinate* temp = worktarget_;
  worktarget_ = NULL;
  return temp;
}
inline ::mc500ipc::Coordinate* CmdMoveTo::mutable_worktarget() {
  set_has_worktarget();
  if (worktarget_ == NULL) {
    auto* p = CreateMaybeMessage<::mc500ipc::Coordinate>(GetArenaNoVirtual());
    worktarget_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mc500ipc.CmdMoveTo.workTarget)
  return worktarget_;
}
inline void CmdMoveTo::set_allocated_worktarget(::mc500ipc::Coordinate* worktarget) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete worktarget_;
  }
  if (worktarget) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      worktarget = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, worktarget, submessage_arena);
    }
    set_has_worktarget();
  } else {
    clear_has_worktarget();
  }
  worktarget_ = worktarget;
  // @@protoc_insertion_point(field_set_allocated:mc500ipc.CmdMoveTo.workTarget)
}

// required uint32 speed = 2;
inline bool CmdMoveTo::has_speed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdMoveTo::set_has_speed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdMoveTo::clear_has_speed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdMoveTo::clear_speed() {
  speed_ = 0u;
  clear_has_speed();
}
inline ::google::protobuf::uint32 CmdMoveTo::speed() const {
  // @@protoc_insertion_point(field_get:mc500ipc.CmdMoveTo.speed)
  return speed_;
}
inline void CmdMoveTo::set_speed(::google::protobuf::uint32 value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:mc500ipc.CmdMoveTo.speed)
}

// required string id = 3;
inline bool CmdMoveTo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMoveTo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMoveTo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMoveTo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& CmdMoveTo::id() const {
  // @@protoc_insertion_point(field_get:mc500ipc.CmdMoveTo.id)
  return id_.GetNoArena();
}
inline void CmdMoveTo::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mc500ipc.CmdMoveTo.id)
}
#if LANG_CXX11
inline void CmdMoveTo::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mc500ipc.CmdMoveTo.id)
}
#endif
inline void CmdMoveTo::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mc500ipc.CmdMoveTo.id)
}
inline void CmdMoveTo::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mc500ipc.CmdMoveTo.id)
}
inline ::std::string* CmdMoveTo::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:mc500ipc.CmdMoveTo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdMoveTo::release_id() {
  // @@protoc_insertion_point(field_release:mc500ipc.CmdMoveTo.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdMoveTo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:mc500ipc.CmdMoveTo.id)
}

// -------------------------------------------------------------------

// CmdChangeTool

// required uint32 newTool = 1;
inline bool CmdChangeTool::has_newtool() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdChangeTool::set_has_newtool() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdChangeTool::clear_has_newtool() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdChangeTool::clear_newtool() {
  newtool_ = 0u;
  clear_has_newtool();
}
inline ::google::protobuf::uint32 CmdChangeTool::newtool() const {
  // @@protoc_insertion_point(field_get:mc500ipc.CmdChangeTool.newTool)
  return newtool_;
}
inline void CmdChangeTool::set_newtool(::google::protobuf::uint32 value) {
  set_has_newtool();
  newtool_ = value;
  // @@protoc_insertion_point(field_set:mc500ipc.CmdChangeTool.newTool)
}

// required string id = 2;
inline bool CmdChangeTool::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdChangeTool::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdChangeTool::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdChangeTool::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& CmdChangeTool::id() const {
  // @@protoc_insertion_point(field_get:mc500ipc.CmdChangeTool.id)
  return id_.GetNoArena();
}
inline void CmdChangeTool::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mc500ipc.CmdChangeTool.id)
}
#if LANG_CXX11
inline void CmdChangeTool::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mc500ipc.CmdChangeTool.id)
}
#endif
inline void CmdChangeTool::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mc500ipc.CmdChangeTool.id)
}
inline void CmdChangeTool::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mc500ipc.CmdChangeTool.id)
}
inline ::std::string* CmdChangeTool::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:mc500ipc.CmdChangeTool.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdChangeTool::release_id() {
  // @@protoc_insertion_point(field_release:mc500ipc.CmdChangeTool.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdChangeTool::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:mc500ipc.CmdChangeTool.id)
}

// -------------------------------------------------------------------

// CommandResponse

// required string id = 1;
inline bool CommandResponse::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandResponse::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandResponse::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& CommandResponse::id() const {
  // @@protoc_insertion_point(field_get:mc500ipc.CommandResponse.id)
  return id_.GetNoArena();
}
inline void CommandResponse::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mc500ipc.CommandResponse.id)
}
#if LANG_CXX11
inline void CommandResponse::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mc500ipc.CommandResponse.id)
}
#endif
inline void CommandResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mc500ipc.CommandResponse.id)
}
inline void CommandResponse::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mc500ipc.CommandResponse.id)
}
inline ::std::string* CommandResponse::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:mc500ipc.CommandResponse.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommandResponse::release_id() {
  // @@protoc_insertion_point(field_release:mc500ipc.CommandResponse.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommandResponse::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:mc500ipc.CommandResponse.id)
}

// required bool finished = 2;
inline bool CommandResponse::has_finished() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommandResponse::set_has_finished() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommandResponse::clear_has_finished() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommandResponse::clear_finished() {
  finished_ = false;
  clear_has_finished();
}
inline bool CommandResponse::finished() const {
  // @@protoc_insertion_point(field_get:mc500ipc.CommandResponse.finished)
  return finished_;
}
inline void CommandResponse::set_finished(bool value) {
  set_has_finished();
  finished_ = value;
  // @@protoc_insertion_point(field_set:mc500ipc.CommandResponse.finished)
}

// optional string diagMsg = 3;
inline bool CommandResponse::has_diagmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommandResponse::set_has_diagmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommandResponse::clear_has_diagmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommandResponse::clear_diagmsg() {
  diagmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_diagmsg();
}
inline const ::std::string& CommandResponse::diagmsg() const {
  // @@protoc_insertion_point(field_get:mc500ipc.CommandResponse.diagMsg)
  return diagmsg_.GetNoArena();
}
inline void CommandResponse::set_diagmsg(const ::std::string& value) {
  set_has_diagmsg();
  diagmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mc500ipc.CommandResponse.diagMsg)
}
#if LANG_CXX11
inline void CommandResponse::set_diagmsg(::std::string&& value) {
  set_has_diagmsg();
  diagmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mc500ipc.CommandResponse.diagMsg)
}
#endif
inline void CommandResponse::set_diagmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_diagmsg();
  diagmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mc500ipc.CommandResponse.diagMsg)
}
inline void CommandResponse::set_diagmsg(const char* value, size_t size) {
  set_has_diagmsg();
  diagmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mc500ipc.CommandResponse.diagMsg)
}
inline ::std::string* CommandResponse::mutable_diagmsg() {
  set_has_diagmsg();
  // @@protoc_insertion_point(field_mutable:mc500ipc.CommandResponse.diagMsg)
  return diagmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommandResponse::release_diagmsg() {
  // @@protoc_insertion_point(field_release:mc500ipc.CommandResponse.diagMsg)
  if (!has_diagmsg()) {
    return NULL;
  }
  clear_has_diagmsg();
  return diagmsg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommandResponse::set_allocated_diagmsg(::std::string* diagmsg) {
  if (diagmsg != NULL) {
    set_has_diagmsg();
  } else {
    clear_has_diagmsg();
  }
  diagmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diagmsg);
  // @@protoc_insertion_point(field_set_allocated:mc500ipc.CommandResponse.diagMsg)
}

// -------------------------------------------------------------------

// FeedHoldPressed

// -------------------------------------------------------------------

// FeedHoldReleased

// -------------------------------------------------------------------

// CycleStart

// -------------------------------------------------------------------

// CycleStop

// -------------------------------------------------------------------

// CycleExecuting

// required uint32 currentProgramStep = 1;
inline bool CycleExecuting::has_currentprogramstep() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CycleExecuting::set_has_currentprogramstep() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CycleExecuting::clear_has_currentprogramstep() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CycleExecuting::clear_currentprogramstep() {
  currentprogramstep_ = 0u;
  clear_has_currentprogramstep();
}
inline ::google::protobuf::uint32 CycleExecuting::currentprogramstep() const {
  // @@protoc_insertion_point(field_get:mc500ipc.CycleExecuting.currentProgramStep)
  return currentprogramstep_;
}
inline void CycleExecuting::set_currentprogramstep(::google::protobuf::uint32 value) {
  set_has_currentprogramstep();
  currentprogramstep_ = value;
  // @@protoc_insertion_point(field_set:mc500ipc.CycleExecuting.currentProgramStep)
}

// -------------------------------------------------------------------

// CycleStopped

// required uint32 nextProgramStep = 1;
inline bool CycleStopped::has_nextprogramstep() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CycleStopped::set_has_nextprogramstep() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CycleStopped::clear_has_nextprogramstep() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CycleStopped::clear_nextprogramstep() {
  nextprogramstep_ = 0u;
  clear_has_nextprogramstep();
}
inline ::google::protobuf::uint32 CycleStopped::nextprogramstep() const {
  // @@protoc_insertion_point(field_get:mc500ipc.CycleStopped.nextProgramStep)
  return nextprogramstep_;
}
inline void CycleStopped::set_nextprogramstep(::google::protobuf::uint32 value) {
  set_has_nextprogramstep();
  nextprogramstep_ = value;
  // @@protoc_insertion_point(field_set:mc500ipc.CycleStopped.nextProgramStep)
}

// -------------------------------------------------------------------

// ClearProgram

// -------------------------------------------------------------------

// AddProgramLine

// required string code = 1;
inline bool AddProgramLine::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddProgramLine::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddProgramLine::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddProgramLine::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& AddProgramLine::code() const {
  // @@protoc_insertion_point(field_get:mc500ipc.AddProgramLine.code)
  return code_.GetNoArena();
}
inline void AddProgramLine::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mc500ipc.AddProgramLine.code)
}
#if LANG_CXX11
inline void AddProgramLine::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mc500ipc.AddProgramLine.code)
}
#endif
inline void AddProgramLine::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mc500ipc.AddProgramLine.code)
}
inline void AddProgramLine::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mc500ipc.AddProgramLine.code)
}
inline ::std::string* AddProgramLine::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:mc500ipc.AddProgramLine.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddProgramLine::release_code() {
  // @@protoc_insertion_point(field_release:mc500ipc.AddProgramLine.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddProgramLine::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:mc500ipc.AddProgramLine.code)
}

// required uint32 step = 2;
inline bool AddProgramLine::has_step() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddProgramLine::set_has_step() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddProgramLine::clear_has_step() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddProgramLine::clear_step() {
  step_ = 0u;
  clear_has_step();
}
inline ::google::protobuf::uint32 AddProgramLine::step() const {
  // @@protoc_insertion_point(field_get:mc500ipc.AddProgramLine.step)
  return step_;
}
inline void AddProgramLine::set_step(::google::protobuf::uint32 value) {
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:mc500ipc.AddProgramLine.step)
}

// -------------------------------------------------------------------

// SetWorkCoordinates

// required .mc500ipc.Coordinate currentWorkCoordinate = 1;
inline bool SetWorkCoordinates::has_currentworkcoordinate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetWorkCoordinates::set_has_currentworkcoordinate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetWorkCoordinates::clear_has_currentworkcoordinate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetWorkCoordinates::clear_currentworkcoordinate() {
  if (currentworkcoordinate_ != NULL) currentworkcoordinate_->Clear();
  clear_has_currentworkcoordinate();
}
inline const ::mc500ipc::Coordinate& SetWorkCoordinates::_internal_currentworkcoordinate() const {
  return *currentworkcoordinate_;
}
inline const ::mc500ipc::Coordinate& SetWorkCoordinates::currentworkcoordinate() const {
  const ::mc500ipc::Coordinate* p = currentworkcoordinate_;
  // @@protoc_insertion_point(field_get:mc500ipc.SetWorkCoordinates.currentWorkCoordinate)
  return p != NULL ? *p : *reinterpret_cast<const ::mc500ipc::Coordinate*>(
      &::mc500ipc::_Coordinate_default_instance_);
}
inline ::mc500ipc::Coordinate* SetWorkCoordinates::release_currentworkcoordinate() {
  // @@protoc_insertion_point(field_release:mc500ipc.SetWorkCoordinates.currentWorkCoordinate)
  clear_has_currentworkcoordinate();
  ::mc500ipc::Coordinate* temp = currentworkcoordinate_;
  currentworkcoordinate_ = NULL;
  return temp;
}
inline ::mc500ipc::Coordinate* SetWorkCoordinates::mutable_currentworkcoordinate() {
  set_has_currentworkcoordinate();
  if (currentworkcoordinate_ == NULL) {
    auto* p = CreateMaybeMessage<::mc500ipc::Coordinate>(GetArenaNoVirtual());
    currentworkcoordinate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mc500ipc.SetWorkCoordinates.currentWorkCoordinate)
  return currentworkcoordinate_;
}
inline void SetWorkCoordinates::set_allocated_currentworkcoordinate(::mc500ipc::Coordinate* currentworkcoordinate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete currentworkcoordinate_;
  }
  if (currentworkcoordinate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      currentworkcoordinate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, currentworkcoordinate, submessage_arena);
    }
    set_has_currentworkcoordinate();
  } else {
    clear_has_currentworkcoordinate();
  }
  currentworkcoordinate_ = currentworkcoordinate;
  // @@protoc_insertion_point(field_set_allocated:mc500ipc.SetWorkCoordinates.currentWorkCoordinate)
}

// -------------------------------------------------------------------

// PositionUpdate

// required .mc500ipc.Coordinate currentWorkCoordinate = 1;
inline bool PositionUpdate::has_currentworkcoordinate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PositionUpdate::set_has_currentworkcoordinate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PositionUpdate::clear_has_currentworkcoordinate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PositionUpdate::clear_currentworkcoordinate() {
  if (currentworkcoordinate_ != NULL) currentworkcoordinate_->Clear();
  clear_has_currentworkcoordinate();
}
inline const ::mc500ipc::Coordinate& PositionUpdate::_internal_currentworkcoordinate() const {
  return *currentworkcoordinate_;
}
inline const ::mc500ipc::Coordinate& PositionUpdate::currentworkcoordinate() const {
  const ::mc500ipc::Coordinate* p = currentworkcoordinate_;
  // @@protoc_insertion_point(field_get:mc500ipc.PositionUpdate.currentWorkCoordinate)
  return p != NULL ? *p : *reinterpret_cast<const ::mc500ipc::Coordinate*>(
      &::mc500ipc::_Coordinate_default_instance_);
}
inline ::mc500ipc::Coordinate* PositionUpdate::release_currentworkcoordinate() {
  // @@protoc_insertion_point(field_release:mc500ipc.PositionUpdate.currentWorkCoordinate)
  clear_has_currentworkcoordinate();
  ::mc500ipc::Coordinate* temp = currentworkcoordinate_;
  currentworkcoordinate_ = NULL;
  return temp;
}
inline ::mc500ipc::Coordinate* PositionUpdate::mutable_currentworkcoordinate() {
  set_has_currentworkcoordinate();
  if (currentworkcoordinate_ == NULL) {
    auto* p = CreateMaybeMessage<::mc500ipc::Coordinate>(GetArenaNoVirtual());
    currentworkcoordinate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mc500ipc.PositionUpdate.currentWorkCoordinate)
  return currentworkcoordinate_;
}
inline void PositionUpdate::set_allocated_currentworkcoordinate(::mc500ipc::Coordinate* currentworkcoordinate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete currentworkcoordinate_;
  }
  if (currentworkcoordinate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      currentworkcoordinate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, currentworkcoordinate, submessage_arena);
    }
    set_has_currentworkcoordinate();
  } else {
    clear_has_currentworkcoordinate();
  }
  currentworkcoordinate_ = currentworkcoordinate;
  // @@protoc_insertion_point(field_set_allocated:mc500ipc.PositionUpdate.currentWorkCoordinate)
}

// -------------------------------------------------------------------

// Message

// optional .mc500ipc.CmdSpindle spindleCommand = 1;
inline bool Message::has_spindlecommand() const {
  return msg_case() == kSpindleCommand;
}
inline void Message::set_has_spindlecommand() {
  _oneof_case_[0] = kSpindleCommand;
}
inline void Message::clear_spindlecommand() {
  if (has_spindlecommand()) {
    delete msg_.spindlecommand_;
    clear_has_msg();
  }
}
inline const ::mc500ipc::CmdSpindle& Message::_internal_spindlecommand() const {
  return *msg_.spindlecommand_;
}
inline ::mc500ipc::CmdSpindle* Message::release_spindlecommand() {
  // @@protoc_insertion_point(field_release:mc500ipc.Message.spindleCommand)
  if (has_spindlecommand()) {
    clear_has_msg();
      ::mc500ipc::CmdSpindle* temp = msg_.spindlecommand_;
    msg_.spindlecommand_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::mc500ipc::CmdSpindle& Message::spindlecommand() const {
  // @@protoc_insertion_point(field_get:mc500ipc.Message.spindleCommand)
  return has_spindlecommand()
      ? *msg_.spindlecommand_
      : *reinterpret_cast< ::mc500ipc::CmdSpindle*>(&::mc500ipc::_CmdSpindle_default_instance_);
}
inline ::mc500ipc::CmdSpindle* Message::mutable_spindlecommand() {
  if (!has_spindlecommand()) {
    clear_msg();
    set_has_spindlecommand();
    msg_.spindlecommand_ = CreateMaybeMessage< ::mc500ipc::CmdSpindle >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:mc500ipc.Message.spindleCommand)
  return msg_.spindlecommand_;
}

// optional .mc500ipc.CmdMoveTo moveToCommand = 2;
inline bool Message::has_movetocommand() const {
  return msg_case() == kMoveToCommand;
}
inline void Message::set_has_movetocommand() {
  _oneof_case_[0] = kMoveToCommand;
}
inline void Message::clear_movetocommand() {
  if (has_movetocommand()) {
    delete msg_.movetocommand_;
    clear_has_msg();
  }
}
inline const ::mc500ipc::CmdMoveTo& Message::_internal_movetocommand() const {
  return *msg_.movetocommand_;
}
inline ::mc500ipc::CmdMoveTo* Message::release_movetocommand() {
  // @@protoc_insertion_point(field_release:mc500ipc.Message.moveToCommand)
  if (has_movetocommand()) {
    clear_has_msg();
      ::mc500ipc::CmdMoveTo* temp = msg_.movetocommand_;
    msg_.movetocommand_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::mc500ipc::CmdMoveTo& Message::movetocommand() const {
  // @@protoc_insertion_point(field_get:mc500ipc.Message.moveToCommand)
  return has_movetocommand()
      ? *msg_.movetocommand_
      : *reinterpret_cast< ::mc500ipc::CmdMoveTo*>(&::mc500ipc::_CmdMoveTo_default_instance_);
}
inline ::mc500ipc::CmdMoveTo* Message::mutable_movetocommand() {
  if (!has_movetocommand()) {
    clear_msg();
    set_has_movetocommand();
    msg_.movetocommand_ = CreateMaybeMessage< ::mc500ipc::CmdMoveTo >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:mc500ipc.Message.moveToCommand)
  return msg_.movetocommand_;
}

// optional .mc500ipc.CommandResponse commandresponse = 3;
inline bool Message::has_commandresponse() const {
  return msg_case() == kCommandresponse;
}
inline void Message::set_has_commandresponse() {
  _oneof_case_[0] = kCommandresponse;
}
inline void Message::clear_commandresponse() {
  if (has_commandresponse()) {
    delete msg_.commandresponse_;
    clear_has_msg();
  }
}
inline const ::mc500ipc::CommandResponse& Message::_internal_commandresponse() const {
  return *msg_.commandresponse_;
}
inline ::mc500ipc::CommandResponse* Message::release_commandresponse() {
  // @@protoc_insertion_point(field_release:mc500ipc.Message.commandresponse)
  if (has_commandresponse()) {
    clear_has_msg();
      ::mc500ipc::CommandResponse* temp = msg_.commandresponse_;
    msg_.commandresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::mc500ipc::CommandResponse& Message::commandresponse() const {
  // @@protoc_insertion_point(field_get:mc500ipc.Message.commandresponse)
  return has_commandresponse()
      ? *msg_.commandresponse_
      : *reinterpret_cast< ::mc500ipc::CommandResponse*>(&::mc500ipc::_CommandResponse_default_instance_);
}
inline ::mc500ipc::CommandResponse* Message::mutable_commandresponse() {
  if (!has_commandresponse()) {
    clear_msg();
    set_has_commandresponse();
    msg_.commandresponse_ = CreateMaybeMessage< ::mc500ipc::CommandResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:mc500ipc.Message.commandresponse)
  return msg_.commandresponse_;
}

// optional .mc500ipc.CmdChangeTool toolcommand = 4;
inline bool Message::has_toolcommand() const {
  return msg_case() == kToolcommand;
}
inline void Message::set_has_toolcommand() {
  _oneof_case_[0] = kToolcommand;
}
inline void Message::clear_toolcommand() {
  if (has_toolcommand()) {
    delete msg_.toolcommand_;
    clear_has_msg();
  }
}
inline const ::mc500ipc::CmdChangeTool& Message::_internal_toolcommand() const {
  return *msg_.toolcommand_;
}
inline ::mc500ipc::CmdChangeTool* Message::release_toolcommand() {
  // @@protoc_insertion_point(field_release:mc500ipc.Message.toolcommand)
  if (has_toolcommand()) {
    clear_has_msg();
      ::mc500ipc::CmdChangeTool* temp = msg_.toolcommand_;
    msg_.toolcommand_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::mc500ipc::CmdChangeTool& Message::toolcommand() const {
  // @@protoc_insertion_point(field_get:mc500ipc.Message.toolcommand)
  return has_toolcommand()
      ? *msg_.toolcommand_
      : *reinterpret_cast< ::mc500ipc::CmdChangeTool*>(&::mc500ipc::_CmdChangeTool_default_instance_);
}
inline ::mc500ipc::CmdChangeTool* Message::mutable_toolcommand() {
  if (!has_toolcommand()) {
    clear_msg();
    set_has_toolcommand();
    msg_.toolcommand_ = CreateMaybeMessage< ::mc500ipc::CmdChangeTool >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:mc500ipc.Message.toolcommand)
  return msg_.toolcommand_;
}

// optional .mc500ipc.FeedHoldPressed feedHoldPressed = 5;
inline bool Message::has_feedholdpressed() const {
  return msg_case() == kFeedHoldPressed;
}
inline void Message::set_has_feedholdpressed() {
  _oneof_case_[0] = kFeedHoldPressed;
}
inline void Message::clear_feedholdpressed() {
  if (has_feedholdpressed()) {
    delete msg_.feedholdpressed_;
    clear_has_msg();
  }
}
inline const ::mc500ipc::FeedHoldPressed& Message::_internal_feedholdpressed() const {
  return *msg_.feedholdpressed_;
}
inline ::mc500ipc::FeedHoldPressed* Message::release_feedholdpressed() {
  // @@protoc_insertion_point(field_release:mc500ipc.Message.feedHoldPressed)
  if (has_feedholdpressed()) {
    clear_has_msg();
      ::mc500ipc::FeedHoldPressed* temp = msg_.feedholdpressed_;
    msg_.feedholdpressed_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::mc500ipc::FeedHoldPressed& Message::feedholdpressed() const {
  // @@protoc_insertion_point(field_get:mc500ipc.Message.feedHoldPressed)
  return has_feedholdpressed()
      ? *msg_.feedholdpressed_
      : *reinterpret_cast< ::mc500ipc::FeedHoldPressed*>(&::mc500ipc::_FeedHoldPressed_default_instance_);
}
inline ::mc500ipc::FeedHoldPressed* Message::mutable_feedholdpressed() {
  if (!has_feedholdpressed()) {
    clear_msg();
    set_has_feedholdpressed();
    msg_.feedholdpressed_ = CreateMaybeMessage< ::mc500ipc::FeedHoldPressed >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:mc500ipc.Message.feedHoldPressed)
  return msg_.feedholdpressed_;
}

// optional .mc500ipc.FeedHoldReleased feedHoldReleased = 6;
inline bool Message::has_feedholdreleased() const {
  return msg_case() == kFeedHoldReleased;
}
inline void Message::set_has_feedholdreleased() {
  _oneof_case_[0] = kFeedHoldReleased;
}
inline void Message::clear_feedholdreleased() {
  if (has_feedholdreleased()) {
    delete msg_.feedholdreleased_;
    clear_has_msg();
  }
}
inline const ::mc500ipc::FeedHoldReleased& Message::_internal_feedholdreleased() const {
  return *msg_.feedholdreleased_;
}
inline ::mc500ipc::FeedHoldReleased* Message::release_feedholdreleased() {
  // @@protoc_insertion_point(field_release:mc500ipc.Message.feedHoldReleased)
  if (has_feedholdreleased()) {
    clear_has_msg();
      ::mc500ipc::FeedHoldReleased* temp = msg_.feedholdreleased_;
    msg_.feedholdreleased_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::mc500ipc::FeedHoldReleased& Message::feedholdreleased() const {
  // @@protoc_insertion_point(field_get:mc500ipc.Message.feedHoldReleased)
  return has_feedholdreleased()
      ? *msg_.feedholdreleased_
      : *reinterpret_cast< ::mc500ipc::FeedHoldReleased*>(&::mc500ipc::_FeedHoldReleased_default_instance_);
}
inline ::mc500ipc::FeedHoldReleased* Message::mutable_feedholdreleased() {
  if (!has_feedholdreleased()) {
    clear_msg();
    set_has_feedholdreleased();
    msg_.feedholdreleased_ = CreateMaybeMessage< ::mc500ipc::FeedHoldReleased >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:mc500ipc.Message.feedHoldReleased)
  return msg_.feedholdreleased_;
}

// optional .mc500ipc.CycleStart cycleStart = 7;
inline bool Message::has_cyclestart() const {
  return msg_case() == kCycleStart;
}
inline void Message::set_has_cyclestart() {
  _oneof_case_[0] = kCycleStart;
}
inline void Message::clear_cyclestart() {
  if (has_cyclestart()) {
    delete msg_.cyclestart_;
    clear_has_msg();
  }
}
inline const ::mc500ipc::CycleStart& Message::_internal_cyclestart() const {
  return *msg_.cyclestart_;
}
inline ::mc500ipc::CycleStart* Message::release_cyclestart() {
  // @@protoc_insertion_point(field_release:mc500ipc.Message.cycleStart)
  if (has_cyclestart()) {
    clear_has_msg();
      ::mc500ipc::CycleStart* temp = msg_.cyclestart_;
    msg_.cyclestart_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::mc500ipc::CycleStart& Message::cyclestart() const {
  // @@protoc_insertion_point(field_get:mc500ipc.Message.cycleStart)
  return has_cyclestart()
      ? *msg_.cyclestart_
      : *reinterpret_cast< ::mc500ipc::CycleStart*>(&::mc500ipc::_CycleStart_default_instance_);
}
inline ::mc500ipc::CycleStart* Message::mutable_cyclestart() {
  if (!has_cyclestart()) {
    clear_msg();
    set_has_cyclestart();
    msg_.cyclestart_ = CreateMaybeMessage< ::mc500ipc::CycleStart >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:mc500ipc.Message.cycleStart)
  return msg_.cyclestart_;
}

// optional .mc500ipc.CycleStop cycleStop = 8;
inline bool Message::has_cyclestop() const {
  return msg_case() == kCycleStop;
}
inline void Message::set_has_cyclestop() {
  _oneof_case_[0] = kCycleStop;
}
inline void Message::clear_cyclestop() {
  if (has_cyclestop()) {
    delete msg_.cyclestop_;
    clear_has_msg();
  }
}
inline const ::mc500ipc::CycleStop& Message::_internal_cyclestop() const {
  return *msg_.cyclestop_;
}
inline ::mc500ipc::CycleStop* Message::release_cyclestop() {
  // @@protoc_insertion_point(field_release:mc500ipc.Message.cycleStop)
  if (has_cyclestop()) {
    clear_has_msg();
      ::mc500ipc::CycleStop* temp = msg_.cyclestop_;
    msg_.cyclestop_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::mc500ipc::CycleStop& Message::cyclestop() const {
  // @@protoc_insertion_point(field_get:mc500ipc.Message.cycleStop)
  return has_cyclestop()
      ? *msg_.cyclestop_
      : *reinterpret_cast< ::mc500ipc::CycleStop*>(&::mc500ipc::_CycleStop_default_instance_);
}
inline ::mc500ipc::CycleStop* Message::mutable_cyclestop() {
  if (!has_cyclestop()) {
    clear_msg();
    set_has_cyclestop();
    msg_.cyclestop_ = CreateMaybeMessage< ::mc500ipc::CycleStop >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:mc500ipc.Message.cycleStop)
  return msg_.cyclestop_;
}

// optional .mc500ipc.CycleExecuting cycleExecuting = 9;
inline bool Message::has_cycleexecuting() const {
  return msg_case() == kCycleExecuting;
}
inline void Message::set_has_cycleexecuting() {
  _oneof_case_[0] = kCycleExecuting;
}
inline void Message::clear_cycleexecuting() {
  if (has_cycleexecuting()) {
    delete msg_.cycleexecuting_;
    clear_has_msg();
  }
}
inline const ::mc500ipc::CycleExecuting& Message::_internal_cycleexecuting() const {
  return *msg_.cycleexecuting_;
}
inline ::mc500ipc::CycleExecuting* Message::release_cycleexecuting() {
  // @@protoc_insertion_point(field_release:mc500ipc.Message.cycleExecuting)
  if (has_cycleexecuting()) {
    clear_has_msg();
      ::mc500ipc::CycleExecuting* temp = msg_.cycleexecuting_;
    msg_.cycleexecuting_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::mc500ipc::CycleExecuting& Message::cycleexecuting() const {
  // @@protoc_insertion_point(field_get:mc500ipc.Message.cycleExecuting)
  return has_cycleexecuting()
      ? *msg_.cycleexecuting_
      : *reinterpret_cast< ::mc500ipc::CycleExecuting*>(&::mc500ipc::_CycleExecuting_default_instance_);
}
inline ::mc500ipc::CycleExecuting* Message::mutable_cycleexecuting() {
  if (!has_cycleexecuting()) {
    clear_msg();
    set_has_cycleexecuting();
    msg_.cycleexecuting_ = CreateMaybeMessage< ::mc500ipc::CycleExecuting >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:mc500ipc.Message.cycleExecuting)
  return msg_.cycleexecuting_;
}

// optional .mc500ipc.CycleStopped cycleStopped = 10;
inline bool Message::has_cyclestopped() const {
  return msg_case() == kCycleStopped;
}
inline void Message::set_has_cyclestopped() {
  _oneof_case_[0] = kCycleStopped;
}
inline void Message::clear_cyclestopped() {
  if (has_cyclestopped()) {
    delete msg_.cyclestopped_;
    clear_has_msg();
  }
}
inline const ::mc500ipc::CycleStopped& Message::_internal_cyclestopped() const {
  return *msg_.cyclestopped_;
}
inline ::mc500ipc::CycleStopped* Message::release_cyclestopped() {
  // @@protoc_insertion_point(field_release:mc500ipc.Message.cycleStopped)
  if (has_cyclestopped()) {
    clear_has_msg();
      ::mc500ipc::CycleStopped* temp = msg_.cyclestopped_;
    msg_.cyclestopped_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::mc500ipc::CycleStopped& Message::cyclestopped() const {
  // @@protoc_insertion_point(field_get:mc500ipc.Message.cycleStopped)
  return has_cyclestopped()
      ? *msg_.cyclestopped_
      : *reinterpret_cast< ::mc500ipc::CycleStopped*>(&::mc500ipc::_CycleStopped_default_instance_);
}
inline ::mc500ipc::CycleStopped* Message::mutable_cyclestopped() {
  if (!has_cyclestopped()) {
    clear_msg();
    set_has_cyclestopped();
    msg_.cyclestopped_ = CreateMaybeMessage< ::mc500ipc::CycleStopped >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:mc500ipc.Message.cycleStopped)
  return msg_.cyclestopped_;
}

// optional .mc500ipc.ClearProgram clearProgram = 11;
inline bool Message::has_clearprogram() const {
  return msg_case() == kClearProgram;
}
inline void Message::set_has_clearprogram() {
  _oneof_case_[0] = kClearProgram;
}
inline void Message::clear_clearprogram() {
  if (has_clearprogram()) {
    delete msg_.clearprogram_;
    clear_has_msg();
  }
}
inline const ::mc500ipc::ClearProgram& Message::_internal_clearprogram() const {
  return *msg_.clearprogram_;
}
inline ::mc500ipc::ClearProgram* Message::release_clearprogram() {
  // @@protoc_insertion_point(field_release:mc500ipc.Message.clearProgram)
  if (has_clearprogram()) {
    clear_has_msg();
      ::mc500ipc::ClearProgram* temp = msg_.clearprogram_;
    msg_.clearprogram_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::mc500ipc::ClearProgram& Message::clearprogram() const {
  // @@protoc_insertion_point(field_get:mc500ipc.Message.clearProgram)
  return has_clearprogram()
      ? *msg_.clearprogram_
      : *reinterpret_cast< ::mc500ipc::ClearProgram*>(&::mc500ipc::_ClearProgram_default_instance_);
}
inline ::mc500ipc::ClearProgram* Message::mutable_clearprogram() {
  if (!has_clearprogram()) {
    clear_msg();
    set_has_clearprogram();
    msg_.clearprogram_ = CreateMaybeMessage< ::mc500ipc::ClearProgram >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:mc500ipc.Message.clearProgram)
  return msg_.clearprogram_;
}

// optional .mc500ipc.AddProgramLine addProgramLine = 12;
inline bool Message::has_addprogramline() const {
  return msg_case() == kAddProgramLine;
}
inline void Message::set_has_addprogramline() {
  _oneof_case_[0] = kAddProgramLine;
}
inline void Message::clear_addprogramline() {
  if (has_addprogramline()) {
    delete msg_.addprogramline_;
    clear_has_msg();
  }
}
inline const ::mc500ipc::AddProgramLine& Message::_internal_addprogramline() const {
  return *msg_.addprogramline_;
}
inline ::mc500ipc::AddProgramLine* Message::release_addprogramline() {
  // @@protoc_insertion_point(field_release:mc500ipc.Message.addProgramLine)
  if (has_addprogramline()) {
    clear_has_msg();
      ::mc500ipc::AddProgramLine* temp = msg_.addprogramline_;
    msg_.addprogramline_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::mc500ipc::AddProgramLine& Message::addprogramline() const {
  // @@protoc_insertion_point(field_get:mc500ipc.Message.addProgramLine)
  return has_addprogramline()
      ? *msg_.addprogramline_
      : *reinterpret_cast< ::mc500ipc::AddProgramLine*>(&::mc500ipc::_AddProgramLine_default_instance_);
}
inline ::mc500ipc::AddProgramLine* Message::mutable_addprogramline() {
  if (!has_addprogramline()) {
    clear_msg();
    set_has_addprogramline();
    msg_.addprogramline_ = CreateMaybeMessage< ::mc500ipc::AddProgramLine >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:mc500ipc.Message.addProgramLine)
  return msg_.addprogramline_;
}

// optional .mc500ipc.SetWorkCoordinates setWorkCoordinates = 13;
inline bool Message::has_setworkcoordinates() const {
  return msg_case() == kSetWorkCoordinates;
}
inline void Message::set_has_setworkcoordinates() {
  _oneof_case_[0] = kSetWorkCoordinates;
}
inline void Message::clear_setworkcoordinates() {
  if (has_setworkcoordinates()) {
    delete msg_.setworkcoordinates_;
    clear_has_msg();
  }
}
inline const ::mc500ipc::SetWorkCoordinates& Message::_internal_setworkcoordinates() const {
  return *msg_.setworkcoordinates_;
}
inline ::mc500ipc::SetWorkCoordinates* Message::release_setworkcoordinates() {
  // @@protoc_insertion_point(field_release:mc500ipc.Message.setWorkCoordinates)
  if (has_setworkcoordinates()) {
    clear_has_msg();
      ::mc500ipc::SetWorkCoordinates* temp = msg_.setworkcoordinates_;
    msg_.setworkcoordinates_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::mc500ipc::SetWorkCoordinates& Message::setworkcoordinates() const {
  // @@protoc_insertion_point(field_get:mc500ipc.Message.setWorkCoordinates)
  return has_setworkcoordinates()
      ? *msg_.setworkcoordinates_
      : *reinterpret_cast< ::mc500ipc::SetWorkCoordinates*>(&::mc500ipc::_SetWorkCoordinates_default_instance_);
}
inline ::mc500ipc::SetWorkCoordinates* Message::mutable_setworkcoordinates() {
  if (!has_setworkcoordinates()) {
    clear_msg();
    set_has_setworkcoordinates();
    msg_.setworkcoordinates_ = CreateMaybeMessage< ::mc500ipc::SetWorkCoordinates >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:mc500ipc.Message.setWorkCoordinates)
  return msg_.setworkcoordinates_;
}

// optional .mc500ipc.PositionUpdate positionUpdate = 14;
inline bool Message::has_positionupdate() const {
  return msg_case() == kPositionUpdate;
}
inline void Message::set_has_positionupdate() {
  _oneof_case_[0] = kPositionUpdate;
}
inline void Message::clear_positionupdate() {
  if (has_positionupdate()) {
    delete msg_.positionupdate_;
    clear_has_msg();
  }
}
inline const ::mc500ipc::PositionUpdate& Message::_internal_positionupdate() const {
  return *msg_.positionupdate_;
}
inline ::mc500ipc::PositionUpdate* Message::release_positionupdate() {
  // @@protoc_insertion_point(field_release:mc500ipc.Message.positionUpdate)
  if (has_positionupdate()) {
    clear_has_msg();
      ::mc500ipc::PositionUpdate* temp = msg_.positionupdate_;
    msg_.positionupdate_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::mc500ipc::PositionUpdate& Message::positionupdate() const {
  // @@protoc_insertion_point(field_get:mc500ipc.Message.positionUpdate)
  return has_positionupdate()
      ? *msg_.positionupdate_
      : *reinterpret_cast< ::mc500ipc::PositionUpdate*>(&::mc500ipc::_PositionUpdate_default_instance_);
}
inline ::mc500ipc::PositionUpdate* Message::mutable_positionupdate() {
  if (!has_positionupdate()) {
    clear_msg();
    set_has_positionupdate();
    msg_.positionupdate_ = CreateMaybeMessage< ::mc500ipc::PositionUpdate >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:mc500ipc.Message.positionUpdate)
  return msg_.positionupdate_;
}

inline bool Message::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void Message::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline Message::MsgCase Message::msg_case() const {
  return Message::MsgCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mc500ipc

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::mc500ipc::CmdSpindle_Command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mc500ipc::CmdSpindle_Command>() {
  return ::mc500ipc::CmdSpindle_Command_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_mc500ipc_2eproto
